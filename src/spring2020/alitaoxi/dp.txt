//评测题目:
//给定一个包含非负整数的 m x n 网格，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。说明：每次只能向下或者向右移动一步。
//参考答案
//输入:
//  [
//    [1,3,1],
//    [1,5,1],
//    [4,2,1]
//  ]
//输出: 7

//二维动态规划
public int solve(int[][] matrix) {
    if(matrix==null){
        return 0;
    }
    int row=matrix.length;
    if(row==0){
        return 0;
    }
    int column=matrix[0].length;
    //构造动态规划数组
    int[][] dp=new int[row][column];
    dp[0][0]=matrix[0][0];
    //边界
    for(int i=1;i<row;i++){
        dp[i][0]=dp[i-1][0]+matrix[i][0];
    }
    for(int j=1;j<column;j++){
        dp[0][j]=dp[0][j-1]+matrix[0][j];
    }
    for(int i=1;i<row;i++){
        for(int j=1;j<column;j++){
            //状态转移方程
            dp[i][j]=Math.min(dp[i-1][j],dp[i][j-1])+matrix[i][j];
        }
    }
    return dp[row-1][column-1];
}


//一维动态规划，因为只需要考虑右边和下面的节点
public int solve(int[][] matrix) {
    if(matrix.length==0){
        return 0;
    }
    int[] dp = new int[matrix[0].length];
    for (int i = 0; i <=matrix.length-1; i++) {
        for (int j = 0; j <=matrix[0].length-1; j++) {
            if(i == 0 && j != 0){
                dp[j] = matrix[i][j] +  dp[j - 1];
            }
            else if(j == 0 && i != 0){
                dp[j] = matrix[i][j] + dp[j];
            }
            else if(j != 0 && i != 0){
                dp[j] = matrix[i][j] + Math.min(dp[j], dp[j - 1]);
            }
            else{
                    dp[j] = matrix[i][j];
            }
        }
    }
    return dp[matrix[0].length-1];
}

//暴力，递归计算
public int solve(int[][] matrix) {
    return helper(matrix, 0, 0);
}

public int helper(int[][] matrix, int i, int j) {
    if(matrix.length==0){
        return 0;
    }
    if (i == matrix.length - 1 && j == matrix[0].length - 1) {
         return matrix[i][j];
    }
    if (i == matrix.length || j == matrix[0].length) {
        return Integer.MAX_VALUE;
    }
    return matrix[i][j] + Math.min(helper(matrix, i + 1, j), helper(matrix, i, j + 1));
}

//实际上与使用二维数组的思路是一样的，只是是在原先的数组上进行更改，不使用额外的动态规划数组
//这次从右下角往左上角找，实际上结果是一致的
public int solve(int[][] matrix) {
    for (int i = matrix.length - 1; i >= 0; i--) {
        for (int j = matrix[0].length - 1; j >= 0; j--) {
            if(j == matrix[0].length - 1 && i != matrix.length - 1) {
                matrix[i][j] = matrix[i][j] + matrix[i + 1][j];
            }
            else if(i == matrix.length - 1 && j != matrix[0].length - 1) {
                matrix[i][j] = matrix[i][j] + matrix[i][j + 1];
            }
            else if(j != matrix[0].length - 1 && i != matrix.length - 1) {
                matrix[i][j] = matrix[i][j] + Math.min(matrix[i + 1][j], matrix[i][j + 1]);
            }
        }
    }
    return matrix[0][0];
}



